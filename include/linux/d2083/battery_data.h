/*
 * Samsung 1200mA battery data from characterization
 *
 * Battery Label:
 *	EB454357VU
 *	SA1
 *	LC1C214LS/4-B
 *	SAMSUNG 3.7V 4.44Whr
 *
 * Apr. 22, 2012:
 *	+ Added -20degC data
 *	+ Changed some scalings
 *
 * Mai 2nd, 2012:
 *   Changes for Rhea implementation
 * 	+ Changed  temperature input from Celsius to Kelvin
 *	+ Changed SOC_VT table span (SOC(Vidle) to:
 *	   3.2V => 0% SOC
 *	   4.16V => 100% SOC
 *	+ Changed Voltage input to ADC codes
 *	+ Changed V_low to ADC code reflecting 3.2V
 *	+ Changed V_high to ADC code reflecting 4.16V
 *	+ Battery current fixed to -100mA discharge which is a reasonable value (I_FIXED)
 *	+ Removed floating point tables and compile option to enhance readability
 *	+ Removed debug statements
 *      - No changes to the temperature columns. 70degC could already be handled by the program
 *	- No changes to the algorithm
 *
 * June 6th, 2020
 *	o Shifted Rhea mapping from voltage[] ->  SOC[V,T]
 *	o Voltage back to normal	
 *	+ optimized data scaling
 *	+ removed data which is not for rhea
 *	+ cleanup
 *  
 */

#define  BATTERY_DATA

/*
 * Full charge capacity (FCC)
 */
# define FCC (1232)	// FCC=1231.585mAh @ 50degC (Average over 8 batteries) - nominal 1200mA

/* 
 * Discrete temperature entries in Kelvin
 * equivalent to -20degC -15degC -10degC -5degC 0degC 10degC 20degC 30degC 40degC 50degC
 */
#define N_TEMPERATURE 10	// No. of temperature columns in the arrays
int temperature[N_TEMPERATURE] =
	{ 253, 258, 263, 268, 273, 283, 293, 303, 313, 323};

#define V_LOW   (3200)		// low voltage clipping point [mV]
#define V_HIGH  (4160)		// high voltage clipping point [mV]

// Discrete voltage entries
int voltage[] = { // Battery voltage [mV] (rhea mapping)
	3200, 3250, 3300, 3350, 3400,
	3450, 3500, 3550, 3600, 3650,
	3700, 3750, 3800, 3850, 3900, 
	3950, 4000, 4050, 4100, 4150,
	4200
    };

/*
 * SOC over voltage  and Temperatures - 3D lokup table SOC(T, V; I=0)
 * Scale: SOC% * 1000
 */
// Temperature: -20degC -15degC -10degC -5degC 0degC 10degC 20degC 30degC 40degC 50degC
int SOC_VT[][N_TEMPERATURE] = {
	{     0,      0,      0,      0,      0,      0,      0,      0,      0,      0}, // 3.20V
	{   793,    683,    501,    395,    217,    199,    221,    207,    218,    252}, // 3.25V
	{  1585,   1367,   1003,    789,    465,    269,    476,    471,    498,    537}, // 3.30V
	{  2378,   2050,   1504,   1184,    791,    582,    795,    814,    847,    911}, // 3.35V
	{  3171,   2733,   2005,   1578,   1197,    973,   1197,   1224,   1280,   1357}, // 3.40V
	{  3963,   3416,   2507,   1973,   1668,   1458,   1694,   1739,   1806,   1910}, // 3.45V
	{  4756,   4100,   3008,   2367,   2106,   2052,   2301,   2372,   2460,   2592}, // 3.50V
	{  5548,   4783,   3509,   3260,   2933,   2799,   3056,   3149,   3267,   3436}, // 3.55V
	{  6341,   5466,   5072,   4487,   4117,   3791,   4020,   4133,   4303,   4523}, // 3.60V
	{ 11895,   9934,   8679,   7532,   6669,   5828,   5926,   6177,   6808,   7928}, // 3.65V
	{ 22702,  19175,  16982,  16207,  16037,  15654,  15855,  16399,  17153,  17945}, // 3.70V
	{ 41239,  37776,  35232,  32021,  29736,  27086,  27223,  27934,  29009,  30421}, // 3.75V
	{ 56226,  53835,  52355,  51240,  50408,  49593,  49546,  49493,  49488,  49666}, // 3.80V
	{ 66187,  64256,  63282,  62588,  62023,  61379,  60973,  60427,  60061,  59833}, // 3.85V
	{ 74146,  72581,  71710,  70996,  70355,  69070,  67658,  66600,  66549,  66875}, // 3.90V
	{ 80871,  79432,  78584,  77949,  77267,  75901,  74860,  74923,  75146,  75334}, // 3.95V
	{ 86473,  85309,  84619,  84032,  83473,  82395,  82196,  82295,  82391,  82499}, // 4.00V
	{ 91432,  90514,  89966,  89503,  89150,  88584,  88618,  88646,  88711,  88786}, // 4.05V
	{ 96019,  95418,  95008,  94743,  94531,  94333,  94335,  94345,  94406,  94470}, // 4.10V
	{ 99714,  99654,  99588,  99528,  99486,  99461,  99469,  99501,  99547,  99589}, // 4.15V
	{101143, 101386, 101648, 101888, 102058, 102157, 102124, 101996, 101812, 101645}  // 4.20V
    };

/*
 * SOC lookup vectore
 * Scaling: SOC% * 10
 */
int SOC[] = {
	   0,  25,  50,  75, 100, 125, 150, 175,
	 200, 225, 250, 275, 300, 325, 350, 375,
	 400, 425, 450, 475, 500, 525, 550, 575,
	 600, 625, 650, 675, 700, 725, 750, 775,
	 800, 825, 850, 875, 900, 925, 950, 975,
	1000
    };

/*
 * Table Ri(SOC%, T) = Ri_SOCT[][] - 3D lookup table
 * Scaling: Ohms * 1000
 */
// Temperature: -20degC -15degC -10degC -5degC 0degC 10degC 20degC 30degC 40degC 50degC
int RI_SOCT[][N_TEMPERATURE] = {
	{8733, 8490, 4380, 2631, 1665, 625, 555, 429, 422, 328}, // 0.00%
	{3654, 2195, 1262,  834,  575, 327, 263, 235, 232, 220}, // 2.50%
	{2577, 1502,  906,  621,  448, 285, 237, 217, 214, 210}, // 5.00%
	{2108, 1236,  769,  538,  399, 268, 227, 210, 208, 207}, // 7.50%
	{1847, 1095,  696,  494,  374, 259, 221, 207, 205, 205}, // 10.00%
	{1679, 1007,  651,  466,  357, 253, 218, 205, 203, 204}, // 12.50%
	{1563,  948,  620,  448,  346, 249, 216, 203, 201, 203}, // 15.00%
	{1478,  905,  598,  434,  339, 246, 215, 202, 200, 202}, // 17.50%
	{1413,  873,  581,  424,  333, 244, 213, 202, 199, 202}, // 20.00%
	{1361,  847,  568,  416,  328, 242, 212, 201, 199, 201}, // 22.50%
	{1319,  827,  557,  410,  324, 241, 212, 200, 198, 201}, // 25.00%
	{1285,  810,  548,  404,  321, 240, 211, 200, 198, 201}, // 27.50%
	{1256,  796,  541,  400,  318, 239, 211, 200, 197, 201}, // 30.00%
	{1231,  784,  535,  396,  316, 238, 210, 199, 197, 201}, // 32.50%
	{1209,  773,  529,  393,  314, 237, 210, 199, 197, 200}, // 35.00%
	{1191,  764,  525,  390,  312, 237, 209, 199, 197, 200}, // 37.50%
	{1174,  757,  521,  388,  311, 236, 209, 199, 197, 200}, // 40.00%
	{1160,  750,  517,  385,  310, 236, 209, 199, 196, 200}, // 42.50%
	{1147,  743,  514,  384,  309, 235, 209, 198, 196, 200}, // 45.00%
	{1135,  738,  511,  382,  308, 235, 208, 198, 196, 200}, // 47.50%
	{1125,  733,  508,  380,  307, 235, 208, 198, 196, 200}, // 50.00%
	{1115,  728,  506,  379,  306, 234, 208, 198, 196, 200}, // 52.50%
	{1107,  724,  504,  377,  305, 234, 208, 198, 196, 200}, // 55.00%
	{1099,  721,  502,  376,  304, 234, 208, 198, 196, 200}, // 57.50%
	{1092,  717,  500,  375,  304, 234, 208, 198, 196, 200}, // 60.00%
	{1085,  714,  499,  374,  303, 233, 208, 198, 196, 200}, // 62.50%
	{1079,  711,  497,  373,  303, 233, 207, 198, 196, 200}, // 65.00%
	{1073,  708,  496,  372,  302, 233, 207, 198, 195, 200}, // 67.50%
	{1068,  706,  494,  372,  302, 233, 207, 198, 195, 200}, // 70.00%
	{1063,  703,  493,  371,  301, 233, 207, 197, 195, 200}, // 72.50%
	{1058,  701,  492,  370,  301, 233, 207, 197, 195, 199}, // 75.00%
	{1054,  699,  491,  370,  300, 232, 207, 197, 195, 199}, // 77.50%
	{1049,  697,  490,  369,  300, 232, 207, 197, 195, 199}, // 80.00%
	{1046,  695,  489,  368,  300, 232, 207, 197, 195, 199}, // 82.50%
	{1042,  694,  488,  368,  299, 232, 207, 197, 195, 199}, // 85.00%
	{1039,  692,  487,  367,  299, 232, 207, 197, 195, 199}, // 87.50%
	{1035,  691,  486,  367,  299, 232, 207, 197, 195, 199}, // 90.00%
	{1032,  689,  486,  366,  299, 232, 207, 197, 195, 199}, // 92.50%
	{1029,  688,  485,  366,  298, 232, 207, 197, 195, 199}, // 95.00%
	{1027,  686,  484,  366,  298, 232, 207, 197, 195, 199}, // 97.50%
	{1024,  685,  484,  365,  298, 231, 207, 197, 195, 199} // 100.00%
    };
